/**** 
Design a HashSet without using any built-in hash table libraries.

To be specific, your design should include these functions:

    add(value): Insert a value into the HashSet. 
    contains(value) : Return whether the value exists in the HashSet or not.
    remove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.


Example:

MyHashSet hashSet = new MyHashSet();
hashSet.add(1);         
hashSet.add(2);         
hashSet.contains(1);    // returns true
hashSet.contains(3);    // returns false (not found)
hashSet.add(2);          
hashSet.contains(2);    // returns true
hashSet.remove(2);          
hashSet.contains(2);    // returns false (already removed)


Note:

    All values will be in the range of [0, 1000000].
    The number of operations will be in the range of [1, 10000].
    Please do not use the built-in HashSet library.

*****/




Naive Solution

    Create a boolean array of size max range + 1. Array values default initialized with false.
    add method call for key just set true at that index in array.
    remove method call for key just set false at that index in array.
    contians method call for key just return that index value from array.

TC - O(1) for all operations.

class MyHashSet {

    boolean[] a;
    /** Initialize your data structure here. */
    public MyHashSet() {
        a = new boolean[1000001];
    }
    
    public void add(int key) {
        a[key] = true;
    }
    
    public void remove(int key) {
        a[key] = false;
    }
    
    /** Returns true if this set contains the specified element */
    public boolean contains(int key) {
        return a[key];
    }
}
